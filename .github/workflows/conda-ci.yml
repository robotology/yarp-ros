name: CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  check-license:
    name: 'Check License'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check License
      run: |
        perl tests/misc/check_license.pl
        
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-20.04]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge -c robostack-staging ycm-cmake-modules ace ros-noetic-ros-base


    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        #the next git switch command will be removed after the branch is merged into master
        cd yarp
        git switch origin/yarp_no_ros --detach

    - name: Configure and build yarp [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Configure yarp-ros [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build yarp-ros [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install yarp-ros [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test yarp-ros [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
